page-training-single
  div.f.flex-column
    module-header(title="{item.data.name}", back='{true}')
    div.px20.pt20.s-full.f.flex-column
      img.mxa.w200.mb10(src='{item.data.image.url}')
      div.fs12.lh14.mb20 {item.data.description}
      div.bold.fs20 LOG
      div.mxn20(data-is='module-chart', item='{logsToShow}', show='{item.logs}')
      form.w-full.f.fh(onsubmit='{setType}')
        div.f.fb.py20.fs16
          p.mr4.fs12 期間:
          select.outline-none.px6.py4.bg-softgray.rounded-4.text-center.mr14(ref='type', onchange='{selectType}')
            option(each='{type, i in types}', selected='{i === 0}', value='{type.id}') {type.label}
          div.f.fb(class='{opacity-30 : !(refs.type.value === "month")}')
            p.mr4.fs12 対象:
            select.outline-none.px6.py4.bg-softgray.rounded-4.text-center(ref='targetYear', onchange='{selectYear}')
              option(value='normal', hidden, selected) ----
              option(each='{year, i in availableYear}', value='{year}', selected='{selectedYear === year}') {year}
            p.mr4.fs12 年
            select.outline-none.px6.py4.bg-softgray.rounded-4.text-center(ref='targetMonth', onchange='{selectMonth}')
              option(value='normal', hidden, selected) --
              option(each='{month, i in availableMonth}', value='{month}', selected='{selectedMonth === month}') {month}
            p.mr14.fs12 月
        button.button.primary(type='submit') 表示
      div.border.bw6.rounded-10.p12.mb20.h200.overflow-y-scroll
        div.border-bottom(if='{log}', each='{log in logsToShow}')
          div.fs18.f.w-full(if='{log.data.type === "normal" || log.data.showYear}')
            //- 年間表示の時だけ切替
            p.mr18 {log.data.showYear ? log.data.day : moment(+log.data.done_at).format('MM/DD')}
            p.mr6 {"avg." : log.data.showYear}{log.data.weight}kg
            p(if='{!log.data.showYear}') {log.data.rep}回×{log.data.set}セット
          div.f.ft.w-full(if='{log.data.type === "customize"}')
            div.fs18.mr16 {moment(+log.data.done_at).format('MM/DD')}
            div.w-full.fs14
              div.mb2(each='{training in log.data.trainings}') {training.weight}kg × {training.rep}回
        div.s-full.f.fh(if='{!item.logs}')
          span まだありません。

  script.
    //- todo-カスタムメニュー表示対応
    this.types = [
      {label: '1週間', id: 'week'},
      {label: '月間', id: 'month'},
      {label: '直近1年', id: 'year'},
    ];

    //- 仮の処理データ連携後実装
    this.on('show', async(e) => {
      this.selectType();
      this.item = await app.store.trainings.get(e.opts.id);
      this.item.logs = await app.store.logs.getByTrainingId(this.item.id);
      if (this.item.logs) {
        //- 仮の処理momentobjに変換
        this.dates = this.item.logs.map(item => moment(+item.data.done_at));
        this.logsToShow = this.getLogs(this.refs.type.value);
        //- 直近1週間のログがなければ直近のログがある月間を表示
        if (!this.logsToShow.length) {
          this.refs.type.value = 'month';
          this.logsToShow = this.getLogs(this.refs.type.value);
          this.selectType();
          this.selectedYear = this.availableYear[this.availableYear.length - 1];
          this.selectYear();
          this.selectedMonth = this.availableMonth[this.availableMonth.length - 1];
          this.logsToShow = this.getLogs(this.refs.type.value);
        }
      }
      this.update();
    });

    this.selectType = () => {
      if (this.refs.type.value === 'month') {
        this.refs.targetYear.disabled = false;
        this.refs.targetMonth.disabled = false;
        //- selectboxに選択可能な値をセット
        this.availableYear = this.dates.map(date => date.get('year'));
        this.availableYear = _.uniq(this.availableYear, (year) => year);
      } else {
        this.refs.targetYear.disabled = true;
        this.refs.targetMonth.disabled = true;
        this.refs.targetYear.value = 'normal';
        this.refs.targetMonth.value = 'normal';
      }
    };

    this.selectYear = () => {
      if (this.refs.targetYear.value !== 'normal') {
        this.selectedYear = +this.refs.targetYear.value;
      }
      this.availableMonth = this.getAvailableMonth(this.selectedYear);
    };

    this.selectMonth = () => {
      this.selectedMonth = +this.refs.targetMonth.value;
    };

    //- 対象年のログが残ってる月を返す関数
    this.getAvailableMonth = (year) => {
      var months = this.dates.filter(date => date.get('year') === year).map(date => date.get('month'));
      months = _.uniq(months, (month) => month).map(month => +month + 1);
      return months;
    };

    this.getLogs = (type) => {
      var logs = [];
      if (type === 'year') {
        var timings = [];
        var logsTemp = this.item.logs.filter(log => moment().diff(moment(+log.data.done_at), 'year') < 1);
        var thisYear = moment().get('year');
        //- 今年、去年と年が一致するobjを返す
        [thisYear - 1, thisYear].forEach(year => {
          var months = this.getAvailableMonth(year);
          months.forEach(month => {
            timings.push({
              year: year,
              month: month,
            });
          });
        });
        
        //- 対象月毎に平均重量、平均rep数を算出
        timings.forEach(timing => {
          var logsSingleMonth =  logsTemp.filter(log => moment(+log.data.done_at).get('month') === +timing.month - 1);
          var totalWeight = 0;
          var totalReps = 0;
          logsSingleMonth.forEach(log => {
            if (log.data.type === "customize") {
              //- 平均重量=総重量/総rep数 平均rep=総rep/セット数
              var weightSum = 0;
              var repSum = 0;
              log.data.trainings.forEach(training => {
                weightSum += +training.weight * +training.rep;
                repSum += +training.rep;
              });
              totalWeight += Math.round(weightSum / repSum);
              totalReps += Math.round(repSum / log.data.trainings.length);
            } else {
              totalWeight += +log.data.weight;
              totalReps += +log.data.rep;
            }
          });
          var aveWeight = Math.round(totalWeight / logsSingleMonth.length);
          var aveReps = Math.round(totalReps / logsSingleMonth.length);
          logs.push({
            day: `${timing.year}/${timing.month}`,
            weight: aveWeight,
            rep: aveReps,
            showYear: true,
          });
        });
        //- yearの表示も他のパターン同様、dataobjに紐付ける
        logs = logs.map(log => {
          var item = {};
          item.data = log;
          return item;
        });
      }
      else {
        if (type === 'week') {
          logs = this.item.logs.filter(log => moment().diff(moment(+log.data.done_at), 'days') < 7);
        }
        else if (type === 'month') {
          logs = this.item.logs
            .filter(log => moment(+log.data.done_at).get('year') === this.selectedYear)
            .filter(log => moment(+log.data.done_at).get('month') === this.selectedMonth - 1);
        }
      }
      return logs;
    };

    this.setType = (e) => {
      e.preventDefault();
      //- 月間を選択 && 対象年月選択未済でアラート
      if (this.refs.type.value === 'month' && (!this.availableYear || !this.availableMonth)) {
        spat.modal.alert('対象年月を入力してください');
        return;
      }
      this.logsToShow =  this.getLogs(this.refs.type.value);
      this.tags['module-chart'].mount();
    };

