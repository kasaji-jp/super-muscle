page-list-single
  div.flex.flex-column.h-full
    module-header(title="MY MENU", back='{true}')
    div.px20.w-full.pt20
      div.f.fm.flex-between.w-full.mb20
        div.fs28.font-impact {item.data.name}
        i.material-icons.fs20.text-main(onclick='{showMenu}') edit
      div.p20.border.rounded-10.bw8.mb20
        div.f.fb.w-full(each='{training in item.data.trainings}', onclick='{toPageSingle}')
          img.s80.mr10(src='{training.data.image.url}')
          div.w-full.border-bottom.f.fb.flex-between.pb8
            div.w-full
              div.fs14.mb8 {training.data.name}
              div.text-deepgray.fs8.px2(data-is='atom-logs-display', item='{training.data.log}')
              p.text-deepgray.fs8.px2(if='{!training.data.log}') なし
            i.material-icons.text-main.fs24(onclick='{deleteItem}') delete
      div.w-full.flex-between.f.fm
        div.fs28.font-impact.mb20 DESCRIPTIONS
        i.material-icons.fs20.text-main(onclick='{editDescription}', if='{!inEdit}') edit
        div.cursor-pointer.fs16.text-main.bold(onclick='{cancel}', if='{inEdit}') 戻る
      div.p20.border.rounded-10.bw8.mb20.lh14(if='{!inEdit}') {item.data.description}
      div.w-full(if='{inEdit}')
        textarea.p20.mb20.lh14.bg-white.input.w-full(value='{item.data.description}', ref='description')
        div.cursor-pointer.bg-sub.f.fh.text-white.rounded-full.bold.w200.mxa.py10.mb20(onclick='{finishEdit}')
          span 編集完了


  script.
    this.on('show', async(e) => {
      //- training個別の情報つきのリストを取得
      this.id = e.opts.id;
      this.item = await this.setUpItem(this.id);
      this.update();
    });

    this.setUpItem = async(id) => {
      var item = await app.utils.getListSingle(id);
      
      //- 紐づけlog情報の準備
      var promises = item.data.trainings.map(training => {
        return app.store.logs.getByTrainingId(training.id);
      });
      var logs = await Promise.all(promises);
      logs.forEach( (log, i) => {
        //- 最新のログだけ抜き出し
        item.data.trainings[i].data.log = log[log.length - 1];
      });
      return item;
    };

    this.showMenu = () => {
      var modal = spat.modal.open('modal-actionsheet');
      modal.on('edit', () => {
        modal.close();
        var modal_menu = spat.modal.open('modal-menu-select', {contents: this.item.contents});
        modal_menu.on('add', async(items) => {
          if (items.length > 1) {
            items.forEach(item => {
              this.item.data.trainings.push(item);
            });
          } else {
            this.item.data.trainings.push(items[0]);
          }
          //- db用にプロパティ調整
          this.trainingSetUp();
          await app.store.lists.update(this.item);
          this.item = await this.setUpItem(this.id);
          spat.modal.alert('追加しました');
          modal_menu.close();
          this.update();
        });
      });
      modal.on('delete', () => {
        modal.close();
        spat.modal.confirm('このリストを削除しますか？').on('confirm', async () => {
          await app.store.lists.delete(this.item);
          app.routeful.go('/menu');
        });
      });
    };
    
    this.trainingSetUp = () => {
      this.item.data.trainings = this.item.data.trainings.map(training => {
        return {id: training.id, name: training.data.name}
      });
    };

    this.deleteItem = (e) => {
      e.stopPropagation();
      var id = e.item.training.id
      spat.modal.confirm('このトレーニングを削除しますか？').on('confirm', async() => {
        this.item.data.trainings = this.item.data.trainings.filter(training => training.id !== id);
        this.trainingSetUp();
        await app.store.lists.update(this.item);
        this.item = await this.setUpItem(this.id);
        this.update();
      });
    };

    this.toPageSingle = (e) => {
      app.routeful.go(`/training/${e.item.training.id}`);
    };

    this.editDescription = () => {
      this.inEdit = true;
      this.update();
    };

    this.finishEdit = async() => {
      this.inEdit = false;
      this.item.data.description = this.refs.description.value;
      this.trainingSetUp();
      await app.store.lists.update(this.item);
      this.item = await this.setUpItem(this.id);
      this.update();
    };

    this.cancel = () => {
      this.inEdit = false;
      this.update();
    };