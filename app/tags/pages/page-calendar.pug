page-calendar 
  div.flex.flex-column.h-full
    module-header(title="LOGS")
    //- calendar
    div.s-full
      div.w-full.f.fm.flex-between.px20.py10
        div.button(onclick='{prev}') prev
        div.fs20.bold {getTargetYear()}年 {getTargetMonth()}月
        div.button(onclick='{next}') next
      div.w-full
        div.row.pb8
          div.col-day.bold.fs14.text-center(each='{index in _.range(7)}') {getDay(index)}
        div.row.w-full.border-bottom(each='{row, i in rows}', class='{"border-top" : i === 0}', if='{i !== 5 || showSixth}')
          div.col-day.text-center.h50.border-right(each='{day in row}', class='{returnClass(day)} {day.isSelected ? "bw3 border border-sub" : "p3"}', onclick='{setPosition}') 
            span {day.date}
            div.s-full.f.fh(if='{day.logs}')
              i.icon-check_stroke.text-main.fs18

    div.pt10.px20.s-full.overflow-scroll
      div.fs16.bold {logsToShow.day}
      div.w-full.pt4.py10.f.flex-between.border-bottom(each='{log in logsToShow.logs}', if='{logsToShow.logs}')
        div.w-full.f
          //- 本番ではtrainingidで画像を引っ張ってくる
          img.s40.mr10(src='{log.data.image}')
          div.w-full
            div.bold.fs16.mb4 {log.data.name}
            div.fs14(if='{log.data.type === "normal"}') {log.data.weight}kg × {log.data.rep}回 × {log.data.set}セット
            div.fs12(if='{log.data.type === "customize"}', each='{training, i in log.data.trainings}')
              span {i + 1}セット目: {training.weight}kg × {training.rep}回
        div.f.fh.cursor-pointer(onclick='{openModal}')
          i.icon-pen.text-sub.fs18

      div.f.fh.py30(if='{!logsToShow.logs}')
        span 記録はまだありません。

      div.w-full.py10
        div.mxa.w200.f.fh.bg-sub.rounded-full(onclick='{addTraining}')
          span.text-white.bold.py20 追加する

    module-tabbar

  style(type='less').
    :scope {
      .col-day {
        width: 14.285714286%;
      }
    }

  script.
    this.on('mount', async() => {
      //- todo- 戻って登録もできる,ログあるところ表示
      this.target = new Date();
      this.logs = await app.store.logs.getMine();
      this.setUp();
      this.update();
    });

    this.setUp = () => {
      this.createRows();
      this.setDateInfo();
      this.setLog();
    };

    this.createRows = () => {
      //- 日付の配列を生成
      this.rows = [];
      _.range(6).forEach(index => {
        var row = [];
        _.range(7).forEach(day => {
          row.push({day: day, isSelected: false});
        });
        this.rows.push(row);
      });
    };

    this.setDateInfo = () => {
      var date = new Date(this.target.getTime());
      date.setDate(1);
      //- 1日の曜日
      var firstDay = date.getDay();
      this.rows.forEach( (days, i) => {
        days.forEach(day => {
          var dateTemp = i * 7 + day.day - firstDay + 1;
          date.setDate(dateTemp);
          day.date = date.getDate();
          day.month = date.getMonth() + 1;
          //- 表示中年月の1日にsetし直す forEachの次の為
          date = new Date(this.target.getTime());
          date.setDate(1);
        });
        this.rows[i] = days;
      });
      //- 表示する必要があるときだけ6行目を表示
      if (this.rows[5][0].month === this.target.getMonth() + 1) this.showSixth = true;
      else this.showSixth = false; 
      this.update();
    };

    //- 日にちごとににログ情報紐付け
    this.setLog = () => {
      this.rows.forEach(row => {
        row.forEach(day => {
          var logsTemp = [];
          this.logs.forEach(log => {
            if (moment(`${this.getTargetYear()}/${day.month}/${day.date}`).isSame(moment(+log.data.done_at), 'day')) {
              logsTemp.push(log);
            }
          });
          if (logsTemp.length > 0) day.logs = logsTemp;
          if (moment(`${this.getTargetYear()}/${day.month}/${day.date}`).isSame(moment(), 'day')) {
            this.setSelected(day);
          }
        });
      });
      this.update()
    };

    this.returnClass = (day) => {
      if (day.month !== this.getTargetMonth()) return "bg-softgray";
      else if (day.day === 0) return "bg-lightblue";
      else if (day.day === 6) return "bg-pink";
    }

    this.getDay = (index) => {
      return ['日', '月', '火', '水', '木', '金', '土'][index];
    };

    this.getTargetYear = () => {
      return this.target.getFullYear();
    };

    this.getTargetMonth = () => {
      return this.target.getMonth() + 1;
    };

    this.prev = () => {
      this.target.setMonth(this.target.getMonth() - 1);
      this.setUp();
    };

    this.next = () => {
      this.target.setMonth(this.target.getMonth() + 1); 
      this.setUp();
    };

    //- タップした日のログを表示
    this.setPosition = (e) => {
      this.rows.forEach(row => {
        row.forEach(days => {
          days.isSelected = false;
        });
      });
      this.setSelected(e.item.day);
      this.update();
    }

    this.setSelected = (day) => {
      this.logsToShow = {
        day: `${this.getTargetYear()}/${day.month}/${day.date}`,
        logs: day.logs
      };
      day.isSelected = true;
    };

    //- モーダルから戻ってきた後に選択していた日付にfocus
    this.focusOnSelected = (date) => {
      this.rows.forEach(row => {
        row.forEach(days => {
          days.isSelected = false;
          if (days.month === moment(date).get('month') + 1 && days.date === moment(date).get('date')) {
            days.isSelected = true;
          }
        });
      });
      var selectedLogs = [];
      this.logs.forEach(log => {
        if (moment(date).isSame(moment(+log.data.done_at), 'day')) {
          selectedLogs.push(log);
        }
      });
      this.logsToShow = {
        day: date,
        logs: selectedLogs,
      };
      this.update();
    };

    //- focus+logのfirestore変更内容反映
    this.logsUpdate = async(date) => {
      this.logs = await app.store.logs.getMine();
      this.setUp();
      //- 選択していた日付にfocus
      this.focusOnSelected(date);
    };

    //- 前日付を遡って登録するための関数
    this.addTraining = () => {
      var modal = spat.modal.open('modal-menu-select');
      modal.on('add', (item) => {
        var selected = [];
        //- 仮対応表示上だけ追加
        if (item.length > 1) {
          item.forEach(item => {
            selected.push(item);
          });
        } else {
          selected.push(item[0]);
        }
        modal.close();
        var modal_edit = spat.modal.open('modal-training-edit', {items: selected, date: this.logsToShow.day});
        modal_edit.on('finish', async(date) => {
          this.logsUpdate(date);
        });
      });
      this.update();
    };

    //- すでに登録ずみトレーニングの編集削除
    this.openModal = (e) => {
      var selected = [];
      //- データ受け渡しの為arrayで
      selected.push(e.item.log);
      var training
      var modal = spat.modal.open('modal-actionsheet', {type: 'training'});
      modal.on('edit', () => {
        modal.close();
        var modal_edit = spat.modal.open('modal-training-edit', {items: selected, edit: true, date: this.logsToShow.day});
        modal_edit.on('finish', async(date) => {
          this.logsUpdate(date);
        });
        this.update()
      });
      modal.on('delete', () => {
        spat.modal.confirm('このログを削除してもよろしいですか?').on('confirm', async() => {
          //- debugger;
          await app.store.logs.delete(selected[0]);
          this.logsUpdate(this.logsToShow.day);
          this.close();
        });
      });

      this.update();
    }