page-index
  div.flex.flex-column.h-full
    module-header(title="TODAY'S WORK OUT", add='{true}')
    div.h-full.overflow-scroll.opacity-0(ref='body')
      div.s-full.f.fh.py20(if='{!todays_menu.length > 0 && !isFinished}') 筋トレしろ
      div.s-full.f.fh.py20(if='{isFinished}') 今日の筋トレは完了！お疲れ様！
      div.container.px20.pt20.relative(if='{!isFinished && todays_menu.length > 0}')
        div.absolute.s60.bg-main.text-white.f.fh.circle.flex-column.b60.r10.z2.fixed(if='{todays_menu.length > 0}', onclick='{end}')
          i.icon-check_stroke.fs16
          div Finish!
        div(data-is='atom-removable', each='{item in todays_menu}', if='{todays_menu.length > 0}', item='{item}')
          div(data-is='item-training', item='{opts.item}')
    module-tabbar

  script.
    this.on('mount', async () => {
      if (firebase.auth().currentUser.isAnonymous) await app.utils.openAuthModal();
      this.todays_menu = [];
      this.datas = [];
      this.isFinished = false;
      this.logs = await app.store.logs.getMine();
      this.logs = this.logs.filter(log => moment(+log.data.created_at).isSame(moment(), 'day'));
      if (this.logs.length > 0) this.isFinished = true;
      this.refs.body.classList.remove('opacity-0');
      this.update();
    });

    this.on('openModal', ()=> {
      if (this.isFinished) {
        spat.modal.alert('本日のトレーニングは完了しています。ログページに移動します。');
        app.routeful.go('/calendar');
        return;
      }
      var modal = spat.modal.open('modal-menu-select', {contents: this.todays_menu});
      modal.on('add', (item) => {
        if (item.length > 1) {
          item.forEach(item => {
            this.todays_menu.push(item);
          });
        } else {
          this.todays_menu.push(item[0]);
        }
        spat.modal.alert('追加しました');
        modal.close();
        this.update();
      });
    });

    this.remove = (item) => {
      this.todays_menu = this.todays_menu.filter(menu => menu.id !== item.id);
      spat.modal.alert('削除しました');
      this.update();
    };

    this.addData = (data) => {
      this.datas.push(data);
    };

    this.end = async() => {
      var promises = this.datas.map(data => {
        return app.store.logs.post(data);
      });
      await Promise.all(promises).then(spat.modal.alert('登録が完了しました'));
      this.isFinished = true;
      this.update();
    }