page-menu
  //- 削除ボタンをやる必要あり
  div.flex.flex-column.h-full
    module-header(title="MY MENU", add='{true}')
    div.f.fc.w-full.py20
      div.s8.circle.mx4(each='{page, i in pages}', class='{current === i ? "bg-main" : "bg-deepgray"}')
    div.f.overflow-hidden.h-full(ref='flickTarget')
      div.w-full.flex-fixed.f.flex-column(each='{page, i in pages}')
        div.text-center.mb30
          span.text-main.border-bottom.border-main.bw4.pb4.fw6 {page.title}
        div.h-full.overflow-scroll.w-full(if='{i === 0}')
          div(data-is='item-workout-list', each='{item in trainings}', item='{item}')
        div.h-full.overflow-scroll.w-full(if='{i === 1}')
          div(data-is='item-workout-list', each='{item in lists}', item='{item}', type='mylist')
    module-tabbar

  script.
    this.current = 0;

    this.selectedItems = [];

    this.pages = [
      {title: 'マイトレーニング'},
      {title: 'マイメニュー'},
    ];

    this.on('mount', async() => {
      if (firebase.auth().currentUser.isAnonymous) await app.utils.openAuthModal();
      setTimeout(() => {
        this.BASE_WIDTH = target.offsetWidth;
      }, 512);
      var target = this.refs.flickTarget;
      this.flickable = window.flickable(target, {distance: 10, axis: 'x'});
      this.flickable.on('move', (e)=> {
        target.scrollLeft -= e.dx;
      });

      this.flickable.on('end', (e) => {
        var rate = e.dx / 5 + e.mx / (this.BASE_WIDTH * 0.5);
        if (rate >= 1 && this.current >= 1 ) {
          this.current--;
        } 
        else if (rate <= -1 && this.current <= this.pages.length - 2)  {
          this.current++;
        }
        this.update();
        $(target).stop().animate({scrollLeft : this.BASE_WIDTH * this.current}, 256);
      });

      var indicator = spat.modal.indicator();
      this.trainings = await app.utils.getTrainingByParts();
      this.lists = await app.utils.getLists();
      
      //- 上でとってきたデータにlog情報紐付け
      var promises = Object.values(this.trainings).map(part => {
        return app.utils.putLog(part.contents);
      });
      promisesList = this.lists.map(list => {
        return app.utils.putLog(list.data.trainings);
      });
      promises.push(promisesList);
      await Promise.all(promises);

      indicator.close();
      this.update();
    });

    this.on('openModal', () => {
      var modal = spat.modal.open('modal-menu-new');
      modal.on('openAddModal', (type) => {
        modal.close();
        this.openAddModal(type);
      });
    });

    this.openAddModal = (type) => {
      spat.modal.open('modal-new-edit', {type: type});
    };