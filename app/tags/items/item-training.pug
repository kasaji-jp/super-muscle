item-training
  div.p20.rounded-10.bg-white.box-shadow.mb20
    div.f.flex-between.fm.border-bottom.bw3.mb8.pb8
      div.bold.fs18.flex-fixed {opts.item.data.name}
      div.f.fh.cursor-pointer(if='{isDone}', onclick='{edit}')
        i.icon-pen.text-sub.fs18
      div.f.fh.flex-column.cursor-pointer.text-green.px4(if='{!isDone}', onclick='{timerOpen}')
        i.icon-timer.fs18.mb2
        span.fs8 {timerOpened ? 'off' : 'on'}
    form(onsubmit='{done}')
      div.w-full
        div.w-full.f.fh.fs14.py8
          div.mr4 重量/回数:
          select.py4.px8.bg-softgray.rounded-4(ref='types', onchange='{update}')
            option(each='{type in types}', value='{type.value}', selected='{type.value === selectedType}') {type.name}
        div.f.flex-between.mb20
          div.w-full(if='{refs.types.value === "normal"}')
            div.f.fb.mb6
              input.p6.text-center.rounded-5.mr10.bg-white.border(if='{!isDone}', onfocus='{closeRemovable}', type='tel', value='{item.data.weight}', ref='weight', required)
              div.fs24.pl40.bold.w100(if='{isDone}') {item.data.weight}
              p.fs12 kg
            div.f.fb.mb6
              input.p6.text-center.rounded-5.mr10.bg-white.border(if='{!isDone}', onfocus='{closeRemovable}', type='tel', value='{item.data.rep}', ref='rep', required)
              div.fs24.pl40.bold.w100(if='{isDone}') {item.data.rep}
              p.fs12 回
            div.f.fb.mb6
              input.p6.text-center.rounded-5.mr10.bg-white.border(if='{!isDone}', onfocus='{closeRemovable}', type='tel', value='{item.data.set}', ref='set', required)
              div.fs24.pl40.bold.w100(if='{isDone}') {item.data.set}
              p.fs12 セット
          div.w-full(if='{refs.types.value === "customize"}')
            div.w-full.f.fr(if='{!isDone}')
              div.f.fh.p4(onclick='{addSet}')
                div.material-icons add
              div.f.fh.p4(onclick='{removeSet}')
                div.material-icons remove
            div.w-full.f.ft(each='{i in _.range(sets)}')
              div.fs20.bold.text-sub.mr10.pt6 {i + 1}:
              div.w-full.mb10
                div.f.fb.mb6
                  input.p6.text-center.rounded-5.mr10.bg-white.border(if='{!isDone}', onfocus='{closeRemovable}', type='tel', value='{item.data.trainings[i].weight}', ref='weight', required)
                  div.fs24.pl40.bold.w100(if='{isDone}') {item.data.trainings[i].weight}
                  p.fs12 kg
                div.f.fb.mb6
                  input.p6.text-center.rounded-5.mr10.bg-white.border(if='{!isDone}', onfocus='{closeRemovable}', type='tel', value='{item.data.trainings[i].rep}', ref='rep', required)
                  div.fs24.pl40.bold.w100(if='{isDone}') {item.data.trainings[i].rep}
                  p.fs12 回

          div.s100.f.fh
            img.object-fit-cover(src='{opts.item.data.image.url || opts.item.data.image}')
      div.transition.overflow-hidden.max-h0(ref='timerBox')
        div(data-is='atom-timer')
      button.p10.rounded-full.f.fh.w200.mxa.mt10(class='bg-{isDone ? "palegray" : "sub"} {"cursor-pointer" : !isDone}', onsubmit='{done}', type='submit')
        span.bold.fs18.text-white.font-impact done!

        

  script.
    this.on('mount', () => {
      this.isDone = false;
      this.timerOpened = false;
      this.types = [
        {name: '固定', value: 'normal'},
        {name: '変動', value: 'customize'},
      ];
      //- カスタマイズ用デフォセット数
      if (this.opts.item.data.trainings) this.sets = this.opts.item.data.trainings.length;
      else this.sets = 3;
      //- トレーニングのtype登録があればトレーニングの編集と判断
      if (this.opts.item.data.type) this.selectedType = this.opts.item.data.type;
      this.update();
      //- inputに登録ずみの値をセット
      this.item = this.setData();
      this.update();
    });

    this.addSet = () => {
      this.sets++;
    };

    this.removeSet = () => {
      this.sets--;
    };

    this.done = (e) => {
      e.preventDefault();
      this.isDone = !this.isDone;
      this.timerOpened = false;
      this.refs.timerBox.style.maxHeight = 0;
      this.item = this.setData();
      spat.modal.alert('Well done!!');
      this.parent.done(this.item);
      this.update();
    };

    this.setData = () => {
      var item = {};
      var data = {};
      if (this.refs.types.value === "normal") {
        data = {
          training_id: this.opts.item.id,
          name: this.opts.item.data.name,
          image: this.opts.item.data.image.url,
          weight: this.refs.weight.value === '' ? this.opts.item.data.weight : this.refs.weight.value,
          rep: this.refs.rep.value === '' ? this.opts.item.data.rep : this.refs.rep.value,
          set: this.refs.set.value === '' ? this.opts.item.data.set : this.refs.set.value,
          type: this.refs.types.value,
          created_at: moment().format('x'),
          updated_at: moment().format('x'),
          done_at: moment().format('x'),
        };
      } else {
        var trainingData = [];
        _.range(this.sets).forEach(set => {
          trainingData.push({
            weight: this.refs.weight[set].value === '' ? this.opts.item.data.trainings[set].weight : this.refs.weight[set].value,
            rep: this.refs.rep[set].value === '' ? this.opts.item.data.trainings[set].rep : this.refs.rep[set].value,
          });
        });
        data = {
          training_id: this.opts.item.id,
          name: this.opts.item.data.name,
          image: this.opts.item.data.image.url,
          trainings: trainingData,
          type: this.refs.types.value,
          created_at: moment().format('x'),
          updated_at: moment().format('x'),
          done_at: moment().format('x'),
        };
      }
      item.data = data;
      if (this.opts.item.data.type) item.id = this.opts.item.id;
      return item;
    };

    this.edit = () => {
      this.isDone = !this.isDone;
      this.update();
    };

    this.closeRemovable = () => {
      this.parent.closeRemovable()
    };

    this.timerOpen = () => {
      var atomHeight = this.tags['atom-timer'].getHeight();
      this.timerOpened = !this.timerOpened;
      if (this.timerOpened) {
        this.refs.timerBox.style.maxHeight = `${atomHeight}px`;
      } else {
        this.refs.timerBox.style.maxHeight = 0;
      }
      this.update();
    };