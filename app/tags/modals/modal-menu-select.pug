modal-menu-select(spat-animation='bottom')
  div.s-full.bg-maingray.f.flex-column.relative(ref='modal')
    module-header.flex-fixed(title='SELECT TRAINING', close='{close}')
    div.f.fc.w-full.py20
      div.s8.circle.mx4(each='{page, i in pages}', class='{current === i ? "bg-main" : "bg-deepgray"}')
    div.f.overflow-hidden.h-full(ref='flickTarget')
      div.w-full.flex-fixed.f.flex-column(each='{page, i in pages}')
        div.text-center.mb30
          span.text-main.border-bottom.border-main.bw4.pb4.fw6 {page.title}
        div.h-full.overflow-scroll(if='{i === 0}')
          div(data-is='item-workout-list', each='{item in trainings}', item='{item}', selected_items='{selectedItems}', added='{added}', select='{true}')
        div.h-full.overflow-scroll(if='{i === 1}')
          div(data-is='item-workout-list', each='{item in lists}', item='{item}', selected_items='{selectedItems}', added='{added}', select='{true}', type='mylist')
        div.h-full.overflow-scroll(if='{i === 2}')
          div(data-is='item-workout-list', each='{item in trainings}', item='{item}', selected_items='{selectedItems}', added='{added}', select='{true}')
    button.absolute.z2.r0.l0.b10.mxa.button.bg-main.w200.p20.rounded-full.text-white.bold.font-impact(onclick='{add}') add


  script.
    this.pages = [
      {title: '最近のトレーニング'},
      {title: '自分のメニュー'},
      {title: 'さがす'},
    ];

    this.on('mount', async() => {
      var hoge = await app.store.trainings.getDefault();
      if(this.opts.contents && this.opts.contents.length > 0) {
        this.added = this.opts.contents;
        this.update();
      }
      this.selectedItems = [];
      this.current = 0;

      //- flickable
      var target = this.refs.flickTarget;
      //- 暫定対応
      setTimeout(() => {
        this.BASE_WIDTH = target.offsetWidth;
      }, 512);
      this.flickable = window.flickable(target, {distance: 10, axis: 'x'});
      this.flickable.on('move', (e) => {
        target.scrollLeft -= e.dx;
      });
      this.flickable.on('end', (e) => {
        var rate = e.dx / 5 + e.mx / (this.BASE_WIDTH * 0.5);
        if (rate >= 1 && this.current >= 1 ) {
          this.current--;
        } 
        else if (rate <= -1 && this.current <= this.pages.length - 2)  {
          this.current++;
        }
        this.update();
        $(target).stop().animate({scrollLeft : this.BASE_WIDTH * this.current}, 256);
      });

      this.trainings = await app.utils.getTrainingByParts();
      this.lists = await app.utils.getLists();
      this.update();
    });


    //- 選択中のアイテムを格納
    this.toggleItems = (items, todo) => {
      if (todo === 'add') {
        if (items.length > 1) {
          items.forEach(item => {
            this.selectedItems.push(item);
          });
        } else {
          this.selectedItems.push(items);
        }
      } else {
        if (items.length > 1) {
          items.forEach(item => {
            this.selectedItems = this.selectedItems.filter(added => added.id !== item.id);
          });
        } else {
          this.selectedItems = this.selectedItems.filter(added => added.id !== items.id);
        }
      }
      this.selectedItems = _.uniq(this.selectedItems, (item) => item.id);
      this.update();
    };

    this.add = (e) => {
      e.stopPropagation();
      if (this.selectedItems.length === 0) {
        spat.modal.alert('トレーニングを追加してください');
        return;
      }
      this.trigger('add', this.selectedItems);
    };
